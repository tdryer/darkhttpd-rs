#!/bin/bash
#
# Build a coverage-enabled darkhttpd, run unit tests and calculate coverage.
#
cd $(dirname $0)
declare -r DIR=tmp.httpd.tests
declare -r PORT=12346

if [ ! -e test.py ]; then
	echo "fatal: can't find test.py. are you in the right directory?" >&2
	exit 1
fi
if [[ -z "$CC" ]]; then
  CC="$(which gcc)"
fi
if [[ -z "$CLANG" ]]; then
  CLANG="$(which clang)"
fi

RUST_LIB="../target/debug/libdarkhttpd.a -lpthread -ldl"

runtests() {
  if [ -e $DIR ]; then
    rm -rf $DIR || exit 1
  fi
  mkdir $DIR || exit 1
  mkdir $DIR/forbidden || exit 1
  chmod 0 $DIR/forbidden || exit 1
  mkdir $DIR/unreadable || exit 1
  chmod 0100 $DIR/unreadable || exit 1
  rm -f darkhttpd.gcda test.out.log test.out.stdout test.out.stderr

  echo "===> run usage statement"
  # Early exit if we can't even survive usage.
  ./a.out >/dev/null 2>>test.out.stderr || exit 1

  echo "===> run tests against a basic instance (generates darkhttpd.gcda)"
  ./a.out $DIR --port $PORT --log test.out.log \
    >>test.out.stdout 2>>test.out.stderr &
  PID=$!
  kill -0 $PID || exit 1
  python3 test.py --verbose
  kill $PID
  wait $PID

  if [[ -s test.out.stderr ]]; then
    echo "FAIL: stderr should have been empty."
    exit 1
  fi
}

# --- main ---

# Build Rust library ahead of time.
cargo build || exit 1

# Check that the code builds with various defines.
echo "===> building without -DDEBUG"
$CC -O2 -Wall ../darkhttpd.c $RUST_LIB || exit 1
echo "===> building with -DNO_IPV6"
$CC -O2 -Wall -DNO_IPV6 ../darkhttpd.c $RUST_LIB || exit 1

# Do coverage and sanitizers.
# In the case of an error being found:
# -fsanitize=undefined produces stderr.
# -fsanitize=address produces stderr and crashes.
# -fsanitize=memory produces stderr and crashes.

# msan first.
# disabled because Rust will break it
# if ! $CLANG -v 2>/dev/null; then
#   echo "***WARNING*** Can't find clang."
#   echo "Skipping memory sanitizer. Try setting the \$CLANG env var."
# else
#   echo "===> building a.out for msan"
#   $CLANG -g -O2 -fsanitize=memory -DDEBUG -DAPBUF_INIT=1 \
#     ../darkhttpd.c $RUST_LIB || exit 1
#   (runtests) || {
#     echo "FAILED! stderr was:"
#     echo "---"
#     cat test.out.stderr
#     echo "---"
#     exit 1
#   }
# fi

# asan and coverage next.
echo "===> building a.out and darkhttpd.gcno for coverage + asan + ubsan"
$CC -g -O2 -fprofile-arcs -ftest-coverage -fsanitize=address \
  -fsanitize=undefined -fno-omit-frame-pointer -DDEBUG -DAPBUF_INIT=1 \
  ../darkhttpd.c $RUST_LIB || exit 1
(export ASAN_OPTIONS=detect_leaks=1; runtests) || {
  echo "FAILED! stderr was:"
  echo "---"
  cat test.out.stderr
  echo "---"
  exit 1
}
echo "===> generating report"
gcov darkhttpd
rm -rf $DIR
rm -f darkhttpd.gcda darkhttpd.gcno a.out
echo "===> PASSED!"
echo "===> read the report: less darkhttpd.c.gcov"
